back=\ 0. Back
exit=\ 0. Exit
login=\ 1. Login |
logout=\ 12. Log out |


personalInfo.choices.user = \ 1. See personal info | 2. Edit personal info | 3. Add personal info  |  
personalInfo.req.biography = Enter biography: 
personalInfo.req.name = Enter name: 
personalInfo.req.birthday = Enter birthday (yyyy-mm-dd): 
personalInfo.req.email = Enter email: 
main.choices.super=\ 10. Reset |
main.choices.admin=\ 9. Menu admin |
main.choices.reader=\ 7. Prestamos | 8. Personal info |
main.choices.visitor=\ 2. Libros | 3. Novelas | 4. Video grabaciones | 5. Canciones | 6. Ensayos | 
item.req.author=Type the name of the author you want to search: 
novels.choices.employee=\n5. Register Novel | 6. Update Novel | 7. Delete Novel |
novels.choices.reader=\ 4. Borrow a Novel |
novels.req.borrowId=Type the id of the novel you want to borrow: 
novels.req.data=Type the new data for the novel: 
novels.req.deleteId=Type the id of the novel you want to delete: 
novels.req.updateId=Type the id of the novel you want to update: 
novels.res.borrowBad=Can''t borrow this novel. {0}
novels.res.borrowOk=Novel added, go to the Borrowings menu to complete the request
novels.choices.visitor=\ 1. List Novels | 2. List authors | 3. Search by author |
unknownOption=Unknown menu option
welcome=Bienvenido a la bibioteca La Pingüinera!!
login.choices.visitor=Login menu: 1. Login with email | 2. Register | 0. Back
login.req.password=password: 
login.res.loginBad=Couldn't login, invalid email or password
login.res.loginOk=Successful login as: 
user.req.name=Name: 
user.req.email=Email:
login.res.registerBad=Couldn''t register user, {0}
borrowings.choices.reader=\ 1. List selected items | 2. List all borrowings | 3. Show borrowing details | 4. Confirm request |
borrowings.choices.employee=\n5. Search by email | 6. Confirm borrowing | 7. Finalize borrowing | 8. Delete borrowing |
borrowings.info.list=Borrowings list: 
borrowings.info.items=Selected items pending to confirm request: {0}
borrowings.req.id=Type the id of the borrowing you want to see its details
borrowings.info.details=Borrowing details: 
borrowings.out.detailsBad=Couldn''t get borrowing details,{0}
borrowings.info.requesting=Requesting selected items
borrowings.req.dueDate=Type the due date before all the items must be returned:
borrowings.res.createOk=Successful request, find an employee to borrow the items from
borrowings.res.createBad=Couldn''t request the borrowing, {0}
borrowings.req.userId=Type the email of the user you want to list its borrowings
borrowings.res.userList=List of borrowings made by: {0}
borrowings.req.confirmId=Type the id of the borrowing you want to confirm as delivered
borrowings.res.confirmOk=Borrowing confirmed successfully
borrowings.res.confirmBad=Couldn''t confirm this borrowing, {0}
borrowings.req.finalizeId=Type the id of the borrowing you want to finalize
borrowings.res.finalizeOk=Borrowing finalized successfully
borrowings.res.finalizeBad=Couldn''t finalize this borrowing, {0}
borrowings.req.deleteId=Type the id of the borrowing you want to delete
borrowings.res.noCopies=\ has no copies available
borrowings.res.bookNotFound=Libro con id {0} no encontrado
books.choices.reader=4. Borrow a Book |
books.choices.employee=\n5. Register Book | 6. Update Book | 7. Delete Book |
books.req.updateId=Type the id of the book you want to update: 
books.req.bookData=Type the new data for the book: 
books.req.deleteId=Type the id of the book you want to delete: 
books.req.toBorrowId=Type the id of the book you want to borrow: 
books.res.borrowingOk=Book added, go to the Borrowings menu to complete the request
books.res.borrowingBad=Can''t borrow this book. {0}

admin.choices.admin=\ 1. List users | 2. Create employee user | 3. Update user | 4. Delete user | 5. Export Csv inventory data | 6. Import Csv inventory data |\
  \n 7. Export Json inventory data | 8. Import Json inventory data  | 9. Export XML inventory data  | 10. Import XML inventory data |
super.choices = 11. Reset
admin.info.usersList=List of users: 
admin.req.createId=Enter the employee user data: 
admin.res.registerOk=User created successfully
admin.res.registerBad=Couldn''t register employee user, {0}
admin.req.updateId=Type the id of the user you want to update: 
admin.res.updateOk=User updated successfully
admin.res.updateBad=Couldn''t update the user, {0}
admin.req.role=Choose a role: 1. READER | 2. EMPLOYEE | 3. ADMIN
admin.res.badRole=Unknown role choice
admin.req.deleteId=Type the id of the user you want to delete: 
admin.res.deleteOk=User deleted successfully
admin.res.deleteBad=Couldn''t delete the user, {0}
main.keyword=principal
main.menu.name=Menú {0}: 
main.res.exportBad=No se pudo exportar la información, \
